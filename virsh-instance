#!/usr/bin/env ruby
#
# Copyright 2012 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

VERSION = 0.1

require 'ostruct'
require 'getoptlong' 
require 'logger'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF

  #{exec_name} [-Dhv] COMMAND [ARGUMENTS]

Clone virtuel machine images and their configuration.

Command
-------

  list
    List available images in image.
  create PATH
    Create a new disk image in PATH.
  clone IMAGE PATH
    Copy source IMAGE to PATH directory including
    its configuration.
  shadow IMAGE PATH
    Make a shadow copy of the source IMAGE in PATH.

Options
-------

  --debug, -D
    Show stacktraces in case of errors.
  --disk-size, -s SIZE
    Image size when creating new images with the 
    command "create" (default 40G).
  --help, -h
    Show this help information.
  --image-path, -i PATH
    Location of the source images (default /srv/vm/images)
 --overwrite, -O
    Overwrite target images if existing.
  --version
    Print version number.

Environment
-----------

  VM_IMAGE_PATH 
    Defines default source image path like option -i.
EOF

class System 
  def self.exec(command)
    command + ' 2>&1'
    $logger.debug "Exec [#{command}]"
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "Returned with #{state}"
    if state == 0
      return output
    else
      $logger.warn "Failed to execute [#{command}]"
      return nil
    end
  end
  def self.run(command)
    $logger.debug "Run [#{command}]"
    system(command)
  end
end

module CLI
  def self.ask?(question)
    $stdout.print "#{question} (Enter/Y/y to continue) "
    answer = $stdin.gets.chomp
    if answer.empty? or "Y" == answer.upcase
      true
    else
      false
    end
  end
end

class Virsh

  class Image

    def self.create(path,size = '40')
      if File.exists?(path) and not $options.overwrite
        return unless CLI.ask?("Overwrite #{path}?")
      end
      dir = File.dirname(path)
      unless File.directory? dir
        System::exec("mkdir -p #{dir}")
      end
      System::exec("qemu-img create -f qcow2 #{path} #{size}G")
    end

    def self.list(path)
      $stdout.puts "Images in #{path}:"
      images = Dir.glob("#{path}/**/*.img").map do |image|
        image = image.gsub(%r{#{path}/},'  ').split('/')[0]
      end
      images.uniq.each do |image|
        $stdout.puts image.gsub(%r{#{path}/},'  ').split('/')[0]
      end
    end

    def self.clone(image,instance,args = {})
      args[:shadow] = false unless args.has_key? :shadow
      args[:overwrite] = false unless args.has_key? :overwrite
      raise("Image #{image} not existing") unless File.directory? image
      if File.directory? instance
        if not args[:overwrite]
          if CLI.ask?("Overwrite #{instance}?")
            System::exec("rm --force #{instance}/*.img")
          end
        end
      else
        System::exec("mkdir -p #{instance}")
      end
      $logger.info("Copy image #{image}")
      if args[:shadow]
        Dir.glob("#{image}/*.img").each do |disk|
          name = File.basename(disk)
          target = "#{instance}/#{name}"
          $logger.info("Create shadow of #{disk}")
          System::run("qemu-img create -b #{disk} -f qcow2 #{target} >/dev/null")
        end
      end
      System::run("cp --recursive --no-clobber #{image}/* #{instance}") 
    end

  end

  def self.install(name,path,args = {})
    args[:size] = 100 unless args.has_key? :size
    args[:ram] = 1024 unless args.has_key? :ram
    raise('Missing installation source!') unless args.has_key? :source
    self::Image.create(path,args[:size])
    options = "--name #{name} --ram #{args[:ram]} --disk path=#{path},format=qcow2,bus=virtio"
    System::run("virt-install --os-type linux --virt-type kvm --graphics vnc --noautoconsole #{options} #{args[:source]}")
  end

  def self.config(path)
    name = File.basename(path)
    output = System::exec("virsh-nat-bridge lookup #{name}")  
    raise("Couldn't read network configuration for #{name}") if output.nil?
    name, ip, mac = output.split
    options = "--name #{name} --mac-address #{mac}"
    System::run("cd #{path} ; virsh-config #{options} libvirt_instance.xml")
  end

  def self.start(path)
    config = "#{path}/libvirt_instance.xml"
    name = path.split('/')[-1]
    raise("No libvirt configuration in #{path}") unless File.exists?(config)
    System::run("virsh define #{config} | sed '/^$/d'")
    System::run("virsh start #{name} | sed '/^$/d'")
  end

  def self.remove(instance)
    name = instance.split('/')[-1]
    raise("Instance #{name} not existing!") unless File.directory? instance
    System::run("virsh shutdown #{name} | sed '/^$/d'")
    System::run("virsh undefine #{name} | sed '/^$/d'")
  end

end

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  $options = OpenStruct.new
  $options.cdrom = nil
  $options.debug = false
  $options.disk_size = '40G'
  $options.location = 'http://ftp.de.debian.org/debian/dists/stable/main/installer-amd64/'
  $options.image_path = '/srv/vms/images'
  $options.instance_path = '/srv/vms/instances'
  $options.overwrite = false
  $options.shadow = false

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%d %H:%M:%S "
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::FATAL

  GetoptLong.new(
    ['--cdrom',GetoptLong::REQUIRED_ARGUMENT],
    ['--debug','-D',GetoptLong::NO_ARGUMENT],
    ['--disk-size','-s',GetoptLong::REQUIRED_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--image-path','-i',GetoptLong::REQUIRED_ARGUMENT],
    ['--instance-path','-p',GetoptLong::REQUIRED_ARGUMENT],
    ['--location','-l',GetoptLong::REQUIRED_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--overwrite','-O',GetoptLong::NO_ARGUMENT],
    ['--version',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--cdrom'
      $options.cdrom = arg
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--disk-size'
      $options.disk_size =arg
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--image-path'
      $options.image_path = arg
    when '--instance.path'
      $options.instance_path =arg
    when '--location'
      $options.location = arg
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--overwrite'
      $options.overwrite = true
    when '--version'
      $stdout.puts VERSION
      exit 0
    end
  end

  $options.image_path = ENV['VM_IMAGE_PATH'] if ENV.has_key? 'VM_IMAGE_PATH'

  command = ARGV.shift || raise('Expecting command argument!')
  case command
  when 'clone','shadow'
    options = Hash.new
    options[:shadow] = true if command == 'shadow'
    image = ARGV.shift || raise('Expecting image name as argument!')
    instance = ARGV.shift || raise('Expecting instance name as argument')
    image = "#{$options.image_path}/#{image}"
    instance = "#{$options.instance_path}/#{instance}"
    Virsh::Image.clone(image,instance,options)
    $stdout.puts "#{command.capitalize} create in #{instance}"
    Virsh.config(instance)
    Virsh.start(instance)
  when 'install'
    name = ARGV.shift || raise('Expecting name as argument!')
    path = ARGV.shift || raise('Expecting disk image path as argument!')
    options = Hash.new
    options[:source] = if not $options.cdrom.nil?
                         "--cdrom #{$options.cdrom}"
                       else
                         "--location #{$options.location}"
                       end
    Virsh.install(name,path,options)
  when 'list'
    Virsh::Image.list($options.image_path)
  when 'remove'
    instance = ARGV.shift || raise('Expecting name as argument!')
    instance = "#{$options.instance_path}/#{instance}"
    Virsh.remove(instance)
  else
    raise("Command #{command} unknown!")
  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
