#!/usr/bin/env ruby
#
# Copyright 2015 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'

class System 
  def self.exec(command)
    command = command.gsub(/\n/," ").strip.gsub(/\s+/,' ')
    command + ' 2>&1'
    $logger.debug "Exec [#{command}]"
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "Returned with #{state}"
    if state == 0
      return output.gsub(/^$\n/, '')
    else
      $logger.warn "Failed to execute [#{command}]"
      return nil
    end
  end
end

class Hash
  def self.autonew(*args)
    new(*args){|hsh, key| hsh[key] = Hash.new(&hsh.default_proc) }
  end
end

class Table

  attr_writer :no_header

  def initialize(header)
    @header = header
    @rows = Array.new
    @no_header = false
  end

  def transform(command, delim = ' ')
    System::exec(command).split("\n").each do |line|
      @rows << line.split(delim)
    end
    print()
  end

  private

  def print
    table = Array.new
    table << @header unless @no_header
    table = table + @rows
    $stdout.puts CLI::Table.print(table)
  end

end

module CLI

  class Table

    def initialize(output)
      @output = output
    end
    def self.print(table)
      Table.new(table).rows
    end
    def rows
      form = format()
      rows = String.new
      @output.each do |row|
        $logger.debug("#{row.inspect}")
        rows << sprintf("#{form}\n", *row)
      end
      return rows
    end
    def format
      format = Array.new
      columns = @output.first.length
      0.upto(columns-1) do |column|
        format << "%-#{field_width(column)}s"
      end
      $logger.debug("Table format #{format}")
      return format.join(' ')
    end
    def field_width(field = 0)
      max_width = 0
      @output.each do |row|
        elem = row[field].to_s
        next if elem.empty?
        width = elem.length
        max_width = width if width > max_width
      end
      return max_width
    end

  end

end



exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
#{exec_name} [<options>] <command> [<subcommand>] [<args>] 

Commands:
  j, jobs                          state of jobs 
  n, nodes                         state of execution nodes

Jobs sub-commands:
  c, completed                     jobs completed after execution
  f, failed                        jobs finished with a failure
  p, pending                       pending jobs
  ps, pending-by-submit            pending jobs by submit time
  pp, pending-by-priority          pending jobs by priority 
> r, running                       running jobs by user
  rr, running-by-runtime           running jobs by runtime 
  ru, running-by-user <user>       running jobs from user

Nodes sub-commands:
  a, allocated                     nodes executing jobs
  d, defect                        number of nodes with defects
  dn, defect-nodes                 list defect nodes
  dr, drain <nodeset> <reason>     drain jobs from nodes
  i, idle                          nodes with available resources
  r, resume <nodeset>              set nodes to state resume
> s, state                         overview nodes/CPUs state
  u, users                         list users of each node

Options:
  --debug, -d                      show stacktraces in case of errors
  --help, -h                       show this help information
  --version, -v                    print program version
EOF


module Jobs

  module_function

  def running
    Table.new(%w(Jobs State User Partition Account)).transform("
      squeue
        --states RUNNING
        --format '%9T %8u %9P %10a'
        --sort 'u'
        --noheader
        | uniq -f2 -c
    ")
  end

  def running_by_runtime
    Table.new(%w(Jobs State Run-Time Time-Left Partition User Account)).transform("
      squeue 
        --states RUNNING 
        --format '%9T %.11M %.11L %9P %8u %10a' 
        --sort '-M,L' 
        --noheader 
        | uniq -f3 -c 
    ")
  end

  def running_by_user
    user = ARGV.shift || raise('No user specified')
    Table.new(%w[Jobs ID* Node Account Partition CxN Workdir Command]).transform("
      squeue -h -o '%A %N %a %P %Cx%D %Z %o' -S P,N -t R -u #{user} | uniq -f 1 -c
    ")
  end

  def pending
    Table.new(%w(Jobs State User Partition Account)).transform("
      squeue
        --states PENDING
        --format '%9T %8u %9P %10a'
        --sort 'u'
        --noheader
        | uniq -f2 -c
    ")
  end

  def pending_by_priority
    Table.new(%w(Jobs State Priority User Account Partition CPUs Nodes Time-Limit Features GRES QoS)).transform("
      squeue
        --all
        --sort '-Q,P,u,C,D,l,t' -t pd
        --format '%9T %8Q %8u %10a %9P %.4C %5D %11l %8f %6b %6q'
        --noheader
        | uniq -c
    ")
  end

  def pending_by_submit_date
    Table.new(%w(Jobs State Submitted Priority User Account Partition Reason)).transform("
      squeue 
        --all 
        --state pending 
        --format '%9T %V %8Q %8u %10a %9P %r' 
        --noheader 
        | uniq -f 2 -c 
        | sort -k 3
    ")
  end

  def completed
    Table.new(%w(Jobs End User Accounts State Nodes)).transform(%Q[
      sacct --state completed
          --noheader
          --allusers
          --starttime $(date --date="1 days ago" +"%Y-%m-%d")
          --format end,user,account,state,nnodes
          --allocations
          | sort -k 1
          | uniq -f 2 -c
    ])
  end

  def failed
    Table.new(%w(Jobs End User Account State Exit)).transform(%Q[
      sacct
        --noheader --allocations --allusers
        --starttime $(date --date="14 days ago" +"%Y-%m-%d")
        --state failed,node_fail,timeout
        --format end,user,account,state,exitcode
        | sort -k 1
        | uniq -f 1 -c
    ])
  end

end

module Nodes

  module_function

  def state
    Table.new(%w(Partition State NumNodes CPUsAlloc CPUsIdle NodeNames)).transform(%q[
      sinfo -o '%9P %.5a %5D %20C %N' 
        | tail -n+2 
        | tr '/' ' ' 
        | tr -s ' ' 
        | cut -d' ' -f1-5,8-
    ])
  end

  def idle
    Table.new(%w(Node State Partition Time Limit RAM S:C:T Share Features GRES)).transform("
      sinfo 
        --format='%o|%T|%P|%L|%l|%m|%z|%h|%f|%G' 
        --noheader
        --state=idle
        --sort o
    ",'|')
  end
  
  def allocated
    Table.new(%w(Node State Load CPUs(A/I/O/T))).transform(%Q{
      sinfo 
        --format='%o %T %O %C' 
        --noheader
        --state=allocated
        --sort o
    })
  end
  
  def drain
    nodes = ARGV.shift || raise('Nodeset to drain not defined!')
    message = ARGV.shift || raise('Specify a reason for draining the nodes')
    System::exec "scontrol update state=drain nodename='#{nodes}' reason='#{message}'"
  end

  def defect
    Table.new(%w(Nodes State Reason)).transform(%q{
      sinfo -h -o '%D|%T|%E' -S '-D' -t drain,draining,drained,down
    },'|')
  end

  def defect_nodes
    Table.new(%w(Nodes State Reason)).transform("
      sinfo -h -o '%n|%T|%E' -S 'E,T' -t drain,draining,drained,down | uniq
    ",'|')
  end

  def resume
    nodes = ARGV.shift || raise('Nodeset to resume not defined!')
    System::exec "scontrol update state=resume nodename=#{nodes}"
  end

  def users
    Table.new(%w(Nodeset Nodes User Account RunTime TimeLeft WorkingDirectory Executed)).transform("
      squeue 
        --noheader
        --states RUNNING
        --sort 'N'
        --format '%N|%D|%u|%a|%M|%L|%Z|%o'
    ",'|')
  end

end



begin

  #stdin = $stdin.tty? ? String.new : $stdin.read

  options = OpenStruct.new
  options.debug = false

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%d %H:%M:%S "
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::INFO

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--version'
      $stdout.puts 0.6
      exit 0
    end
  end

  command = ARGV.shift || 'help'
  case command
  when 'j','jobs'
     subcommand = ARGV.shift || 'running'
     case subcommand
     when 'p','pending'
       Jobs::pending
     when 'ps','pending-by-submit'
       Jobs::pending_by_submit_date
     when 'pp','pending-by-priority'
       Jobs::pending_by_priority
     when 'c','completed'
       Jobs::completed
     when 'r','running'
       Jobs::running
     when 'rr','running-by-runtime'
       Jobs::running_by_runtime
     when 'ru', 'running-by-user'
       Jobs::running_by_user
     when 'f','failed'
       Jobs::failed
     else
       raise("Sub-command #{subcommand} not supported") 
     end
  when 'n','nodes'
     subcommand = ARGV.shift || 'state'
     case subcommand
     when 'a','allocated'
       Nodes::allocated
     when 'dr', 'drain'
       Nodes::drain
     when 'd','defect'
       Nodes::defect
     when 'dn','defect-nodes'
       Nodes::defect_nodes
     when 'i','idle'
       Nodes::idle
     when 'r','resume'
       Nodes::resume
     when 's','state'
       Nodes::state
     when 'u','users'
       Nodes::users
     end
  else
    raise("Command '#{command}' not supported!")
  end


rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
