#!/usr/bin/env ruby
#
# Copyright 2016 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'

#
# Interface to the command-line environment
#
module System

  module_function

  ##
  # Execute a command passed as parameter an return the output
  # on success. Otherwise the method returns Nil indicating
  # a problem on execution.
  def exec(command, file = '')
    if file.empty?
      command << ' 2>&1'
    # Users can optionally provide a file to store the output into
    #
    else
      # Avoid piping the content threw the Ruby process
      #
      command << " 1> #{file}"
    end
    command = command.delete("\n").squeeze(' ')
    $logger.info "<#{self.class}##{__method__.to_s}> #{command}"
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "<#{self.class}##{__method__.to_s}> returned with #{state}"
    if state == 0
      return output
    else
      $logger.warn "<#{self.class}##{__method__.to_s}> failed to execute [#{command}]"
      return nil
    end
  end

end

module SacctMgr

  module_function

  def get_accounts
    command = 'sacctmgr -n show account format=account'
    __ = System::exec command
    return Array.new if __.nil? or __.empty?
    accounts = Array.new
    __.split("\n").sort.each do |account|
      accounts << account.gsub(/\s+/, "")
    end
    return accounts
  end

  def get_account_users(account)
    command = %Q{
      sacctmgr show account where name=#{account} withassoc format=user --noheader 
        | tail -n+2 
        | tr -d ' '
    }
    __ = System::exec command 
    raise("No user in account #{account}") if __.nil? or __.empty?
    # return a list of user names in given account 
    return __.split("\n")
  end

  def get_user_limit(account,user,limit_name)
    command = %Q<sacctmgr -n show user where account=#{account} name=#{user} withassoc format=#{limit_name}>
    __ = System::exec(command).gsub(/\s+/, "")
    return nil if __.empty?
    return __.to_i
  end
  
  def set_user_limit(account,user,limit)
    limit_name, target_limit = limit.split('=')
    # Get the current value of the limit
    current_limit = get_user_limit(account,user,limit_name)
    set = false
    # No target limit defined
    if target_limit.nil?
      set = false
    # No limit set yet... 
    elsif current_limit.nil?
      set = true
    # Limit set already...
    elsif current_limit.kind_of? Numeric
      # Limit passed by user differs from limit currently set
      if current_limit != target_limit
        # Only overwrite if forced by user
        set = true if $options.overwrite
      end
    end
    # Do nothing unless the limit should be set to given target_limit
    if set
      command = %Q<sacctmgr modify user where account=#{account} name=#{user} set #{limit} --immediate>
      $logger.info "<#{self.class}##{__method__.to_s}> #{command}"
      System::exec(command) unless $options.dry_run
      $stdout.puts %Q<#{user}:#{account} #{limit}>
    else
      $stdout.puts %Q<#{user}:#{account} #{limit_name}=#{current_limit}>
    end
  end

end


exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
#{exec_name} [-dhlv] <account>|all <limit>[=<value>] 

  <account>|all      Name of the Slurm account to modify,
                     or `all` to modify all accounts
  <limit>            List values of specified limit
  <limit>[=<value>]  Set value for specified limit
  --debug, -d        Show stacktraces in case of errors
  --dry-run          Show commands instead of execution
  --help, -h         Show this help information
  --list, -l         List users with define limit
  --version          Print version number
EOF

EXAMPLES = <<EOF
Show the GrpCPUs limit for all users in the account 'hpc':

   >>> #{exec_name} hpc grpcpus

Set GrpCPUs for all users of account 'hpc' to 500

   >>> #{exec_name} hpc grpcpus=500
EOF

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  $options = OpenStruct.new
  $options.debug = false
  $options.dry_run = false
  $options.list = false
  $options.overwrite = false

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::WARN

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--dry-run',GetoptLong::NO_ARGUMENT],
    ['--examples','-e',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--list','-l',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--overwrite','-O',GetoptLong::NO_ARGUMENT],
    ['--version',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--dry-run'
      $options.dry_run = true
      $logger.level = Logger::INFO
    when '--examples'
      $stdout.puts EXAMPLES
      exit 0
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--list'
      $options.list = true
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
      end
    when '--overwrite'
      $options.overwrite = true
    when '--version'
      $stdout.puts 0.3
      exit 0
    end
  end

  account = ARGV[0] || raise('No account specified!')
  limit = ARGV[1] || raise('No limit specified!')

  accounts = Array.new
  if account == 'all'
    accounts += SacctMgr.get_accounts
  else
    accounts << account
  end

  accounts.each do |account|
    SacctMgr.get_account_users(account).each do |user|
      SacctMgr.set_user_limit(account,user,limit)
    end
  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
