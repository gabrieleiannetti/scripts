#!/usr/bin/env ruby
#
# Copyright 2012-2014 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'
require 'erb'

class Hash

  def self.autonew(*args)
    new(*args){|hsh, key| hsh[key] = Hash.new(&hsh.default_proc) }
  end

end


exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
#{exec_name} creates an HTML gallery decending a directory tree
EOF

begin

  #stdin = $stdin.tty? ? String.new : $stdin.read

  options = OpenStruct.new
  options.debug = false

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::WARN

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--version'
      $stdout.puts 0.1
      exit 0
    end
  end

  dirs = ['.'] + Dir.glob('**/*').select { |p| File.directory? p }
  dirs.map! { |dir| File.expand_path(dir) }

  template = DATA.read

  dirs.each do |dir|

    Dir.chdir(dir)    
    namespace = OpenStruct.new
    namespace.content = Array.new
    
    imgs = Dir["*.{jpg,jpeg,png}"].sort

    sdirs = Dir.glob("*").select { |p| File.directory? p }
    $logger.info("#{dir}: #{imgs.length} images, #{sdirs.length} sub-directories")

    imgs.each do |img| 
      namespace.content << { link: img, src: img, desc: File.basename(img) }
    end
 
    sdirs.each do |sdir|
      cover = "#{sdir}/cover"
      unless File.exists? cover
        $stderr.puts "#{dir}/#{cover}: missing"
        cover = String.new
      end
      namespace.content << { link: "#{sdir}/index.html", src: cover, desc: sdir }
    end  
    
    $logger.debug("Images: #{namespace.content.inspect}")

    html = ERB.new(template).result(namespace.instance_eval {binding})
    file = 'index.html'
    File.write(file,html.gsub(/^$\n/,''))
    $stdout.puts "#{dir}/#{file}: created"

  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0

__END__
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <style type="text/css">

    body {
      background:#111;
      font-size:11px;
    }

    div.img {
      float:left;
      position:relative;
      margin:3px;
      width:400px;
      height:400px;
      border:2px solid #333;
      background:black;
      color:lightgray;
      text-align:center;  
    }

    div.img:hover {
      border:2px solid dodgerblue;
    }

    div.img span.box {
      display:inline-block;
      height:100%;
      vertical-align: middle;
      padding:0;
      margin:0;
    }

    div.img img {
      display:inline-block;
      max-width:99%;
      max-height:99%;
      vertical-align: middle;
      text-align:center;  
      padding:0;
      margin:0;
    }

    div.img div.desc {
      float: left;
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 1000;
      background:black;
      width:100%;
      opacity: 0.6;
    }
  </style>
</head>
<body>
  <% content.each do |img| %>
    <a href="<%= img[:link] %>">
      <div class="img">
        <div class="desc"><%= img[:desc]%></div>
        <span class="box"></span>
        <img src="<%= img[:src] %>"></img>
      </div>
    </a>
  <% end %>
</body>
</html>
