#!/usr/bin/env ruby
#
# Copyright 2019 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
#{exec_name} [<options>] <command> [<arguments>]

<command>
  list, l [<pattern>]                   List all links, or links matching a pattern
  search, s <pattern>                   First link matching pattern

<options>
  -d, --debug                           Show stacktraces in case of errors
  -h, --help                            Show this help information
  -o, --open                            Open in web browser
  -v, --version                         Print version number
EOF

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  $options = OpenStruct.new
  $options.bookmarks_path = [ "#{ENV['HOME']}/.bookmarks" ]
  $options.browser = 'firefox'
  $options.debug = false
  $options.open = false

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::WARN

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--open','-o',GetoptLong::NO_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--open'
      $options.open = true
    when '--version'
      $stdout.puts 0.1
      exit 0
    end
  end

  if ENV.include?('BROWSER')
    $options.browser = ENV['BROWSER'] unless ENV['BROWSER'].empty?
  end

  bookmarks = {}

  $options.bookmarks_path.each do |path|
    Dir.glob("#{path}/**/*.bm").each do |file|
      File.readlines(file).each do |line|
        case line
        when /^#/
          next # ignore comments
        when /^[ ]*$/
          next # ignore empty lines
        else
          key, value = line.split
          bookmarks[key] = value
        end
      end
    end
  end

  command = ARGV.shift || raise('No command argument!')
  case command
  when 'list','l'
    pattern = ARGV.shift || ''
    bookmarks.each do |k,v|
      unless pattern.empty?
        next unless k =~ %r[#{pattern}]
      end
      $stdout.puts "#{k} â‡’  #{v}"
    end
  when 'search','s'
    pattern = ARGV.shift || raise('No search pattern argument')
    bookmarks.each do |k,v|
      # on first match
      if k =~ %r[#{pattern}]
        if $options.open
          `#{$options.browser} #{v}`
        else
          $stdout.puts v
        end
        exit 0
      end
    end
  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
