#!/usr/bin/env ruby
#
# Copyright 2012 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


require 'ostruct'
require 'getoptlong' 
require 'logger'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF

  #{exec_name} [-DhOv] -i PATH -p PATH -l URL 
               -s SIZE COMMAND [ARGUMENTS]

Clone virtuel machine images and their configuration.

Command
-------

  clone, cl <image> <instance>
    Clone source virtual machine image and start a 
    virtual machine instance with specified name.
  exec <instance> <command>
    Execute command in virtual machine insyance
  install, in <instance> <path>
    Install a new virtual machine image.
  list, l
    List available images.
  remove, rm <instance>
    Shutdown and undefine instance.
  shadow, sh <image> <instance>
    Make shadow disks of virtual machine image and 
    start a virtual machine instance with
    specified name

Options
-------

  --bridge, -b NAME
    Network birdge to use (default nbr0)
  --cdrom PATH
    Location of the CDROM ISO for installation.
  --debug, -D
    Show stacktraces in case of errors.
  --disk-size, -s SIZE
    Image size when creating new images with the 
    command "create" (default 40G).
  --help, -h
    Show this help information.
  --image-path, -i PATH
    Location of the source images (default /srv/vms/images)
  --instance-path, -p PATH
    Location of the virtual machine instances (default
    /srv/vms/instances)
  --location, -l URL
    URL for installation sources (default Debian stable).
  --overwrite, -O
    Overwrite existing virtual machine instance.
  --version
    Print version number.

Environment
-----------

  VM_IMAGE_PATH 
    Defines default source image path (like option -i).
  VM_INSTANCE_PATH
    Defines default instance path (like option -p).
EOF

class System 
  def self.exec(command)
    command + ' 2>&1'
    $logger.debug "Exec [#{command}]"
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "Returned with #{state}"
    if state == 0
      return output
    else
      $logger.warn "Failed to execute [#{command}]"
      return nil
    end
  end
  def self.run(command)
    $logger.debug "Run [#{command}]"
    system(command)
  end
end

module CLI
  def self.ask?(question)
    $stdout.print "#{question} (Enter/Y/y to continue) "
    answer = $stdin.gets.chomp
    if answer.empty? or "Y" == answer.upcase
      true
    else
      false
    end
  end
end

class Virsh

  class Image

    def self.create(path,size = '40')
      if File.exists?(path) and not $options.overwrite
        return unless CLI.ask?("Overwrite #{path}?")
      end
      dir = File.dirname(path)
      unless File.directory? dir
        System::exec("mkdir -p #{dir}")
      end
      System::exec("qemu-img create -f qcow2 #{path} #{size}G")
    end

    def self.list(path)
      $stdout.puts "Images in #{path}:"
      images = Dir.glob("#{path}/**/*.img").map do |image|
        image = image.gsub(%r{#{path}/},'  ').split('/')[0]
      end
      images.uniq.sort.each do |image|
        $stdout.puts image.gsub(%r{#{path}/},'  ').split('/')[0]
      end
    end

    def self.clone(image,instance,args = {})
      # default values
      args[:shadow] = false unless args.has_key? :shadow
      args[:overwrite] = false unless args.has_key? :overwrite
      # Continue if the source virtual machine image exists
      raise("Image #{image} not existing") unless File.directory? image
      # If the target directory exists?
      if File.directory? instance
        # Is the virtual machine instance running?
        name = instance.split('/')[-1]
        if Virsh.running?(name)
          # Does the users wants to overwrite the virtual machine instance
          if args[:overwrite] or CLI.ask?("Remove instance #{name}?")
            # Shutdown and undefine the virtual machine instance
            Virsh.remove(name)
            sleep 5
          else
            exit 0
          end
        end
        # Delete existing virtual machine images from the target directory
        System::exec("rm --force #{instance}/*.img")
      # Create target directory if missing
      else
        System::exec("mkdir -p #{instance}")
      end
      $logger.info("Copy image #{image}")
      if args[:shadow]
        Dir.glob("#{image}/*.img").each do |disk|
          name = File.basename(disk)
          target = "#{instance}/#{name}"
          $logger.info("Create shadow disk #{target}")
          System::run("qemu-img create -b #{disk} -f qcow2 #{target} >/dev/null")
        end
      end
      System::run("cp --recursive --no-clobber #{image}/* #{instance}") 
    end

  end

  def initialize(image_path,instance_path)
    @image_path = image_path
    @instance_path = instance_path
  end

  def self.install(name,path,args = {})
    
    raise('Missing installation source!') unless args.has_key? :source

    # 100GB virtual machine disk image by default
    args[:size] = 100 unless args.has_key? :size

    # 1GB RAM for the virtual machine by default
    args[:ram] = 1024 unless args.has_key? :ram

    # Create the virtual machine disk image
    self::Image.create(path,args[:size])

    # Options for the `virt-install` command
    options = [
      "--os-type linux --virt-type kvm",
      "--graphics vnc --noautoconsole",
      "--connect qemu:///system",
      "--network 'bridge=#{args[:bridge]}'",
      "--name #{name} --ram #{args[:ram]}",
      "--disk path=#{path},format=qcow2,bus=virtio" 
    ]

    # Start the virtual machine image installation process
    System::run("virt-install #{options.join(' ')} #{args[:source]}")

  end


  # Create the Libvirt XML configuration file, and the SSH configuration
  # file for a virtual machine instance.
  def self.config(path)
    name = File.basename(path)
    # Get the network configuration for the virtual machine instance
    output = System::exec("virsh-nat-bridge lookup #{name}")  
    # Don't continue if unless the network configuration is found
    raise("Couldn't read network configuration for #{name}") if output.nil?
    name, ip, mac = output.split
    # Write the libvirt configuration file
    virsh_config = "cd #{path} ; virsh-config --vnc --name #{name} --mac-address #{mac} libvirt_instance.xml"
    # Respect the overwrite option set by the user
    virsh_config << " --overwrite" if $options.overwrite
    System::run(virsh_config)
    # Create the SSH configuration file for password-less login 
    ssh_instance = "ssh-instance #{ip} --user devops --identity-file #{path}/keys/id_rsa #{path}"
    # Respect the overwrite option set by the user
    ssh_instance << " --overwrite" if $options.overwrite
    System::run(ssh_instance)
  end

  def self.start(path)
    config = "#{path}/libvirt_instance.xml"
    name = path.split('/')[-1]
    raise("No libvirt configuration in #{path}") unless File.exists?(config)
    System::run("virsh define #{config} | sed '/^$/d'")
    System::run("virsh start #{name} | sed '/^$/d'")
  end

  def self.remove(name)
    name = self.nat_config(name)[0]  
    System::run("virsh destroy #{name} | sed '/^$/d'")
    System::run("virsh undefine #{name} | sed '/^$/d'")
  end

  def self.running?(name)
    output = System::exec("virsh list | grep #{name} >/dev/null 2>&1")
    if output.nil?
      false
    else
      true
    end
  end

  def self.nat_config(name)
    output = System::exec("virsh-nat-bridge lookup #{name}")  
    raise("Couldn't read network configuration for #{name}") if output.nil?
    return output.split
  end

  def self.instance(name)
    name = "#{name}.devops.test" unless name =~ /\.devops\.test$/
    name
  end

end

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  $options = OpenStruct.new
  $options.cdrom = nil
  $options.debug = false
  $options.disk_size = '40G'
  $options.location = 'http://ftp.de.debian.org/debian/dists/stable/main/installer-amd64/'
  $options.image_path = '/srv/vms/images'
  $options.instance_path = '/srv/vms/instances'
  $options.overwrite = false
  $options.shadow = false
  $options.bridge = 'nbr0'

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%d %H:%M:%S "
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::FATAL

  GetoptLong.new(
    ['--bridge','-b',GetoptLong::REQUIRED_ARGUMENT],
    ['--cdrom',GetoptLong::REQUIRED_ARGUMENT],
    ['--debug','-D',GetoptLong::NO_ARGUMENT],
    ['--disk-size','-s',GetoptLong::REQUIRED_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--image-path','-i',GetoptLong::REQUIRED_ARGUMENT],
    ['--instance-path','-p',GetoptLong::REQUIRED_ARGUMENT],
    ['--location','-l',GetoptLong::REQUIRED_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--overwrite','-O',GetoptLong::NO_ARGUMENT],
    ['--version',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--bridge'
      $options.bridge = arg
    when '--cdrom'
      $options.cdrom = arg
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--disk-size'
      $options.disk_size =arg
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--image-path'
      $options.image_path = arg
    when '--instance.path'
      $options.instance_path =arg
    when '--location'
      $options.location = arg
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--overwrite'
      $options.overwrite = true
    when '--version'
      $stdout.puts 0.5
      exit 0
    end
  end

  command = ARGV.shift || raise('Expecting command argument!')

  $options.image_path = ENV['VM_IMAGE_PATH'] if ENV.has_key? 'VM_IMAGE_PATH'
  $options.instance_path = ENV['VM_INSTANCE_PATH'] if ENV.has_key? 'VM_INSTANCE_PATH'

  case command

  when 'clone','cl','shadow','sh'

    # check user arguments
    image = ARGV.shift || raise('Expecting image name as argument!')
    image = "#{$options.image_path}/#{image}"
    instance = ARGV.shift || raise('Expecting instance name as argument')

    # Append domain name if missing
    instance = Virsh::instance(instance)
    # Path to virtual machine instance
    path = "#{$options.instance_path}/#{instance}"

    # clone options
    options = Hash.new
    options[:shadow] = true if command == 'shadow' or command == 'sh'
    options[:overwrite] = true if $options.overwrite

    Virsh::Image.clone(image,path,options)
    Virsh.config(path)
    Virsh.start(path)

  when 'exec','sync'

    # Name of the virtual machine instance
    name = ARGV.shift || raise('Expecting name for target VM instance')
    # Command to be executed
    raise('Provide a command to be executed in VM instance') unless ARGV.length > 0

    # Append domain name if missing
    name = Virsh::instance(name)
    # Path to virtual machine instance
    path = "#{$options.instance_path}/#{name}" 

    # Execute a command in target virtual machine instance
    $stdout.puts System::exec(%Q<cd #{path} ; ssh-#{command} -r "#{ARGV.join(' ')}">)

  when 'install'

    # Name for the virtual machine instance
    name = ARGV.shift || raise('Expecting name as argument!')
    # Path to the virtual machine disk image
    path = ARGV.shift || raise('Expecting disk image path as argument!')

    # Append domain name if missing
    name = Virsh::instance(name)

    # Use a URL for bootstrapping by default 
    source = if not $options.cdrom.nil?
               "--cdrom #{$options.cdrom}"
             else
               "--location #{$options.location}"
             end

    # Call the virtual machine installation with arguments
    options = { :bridge => $options.bridge, :source => source }
    Virsh.install(name,path,options)

  when 'list','li','l'

    Virsh::Image.list($options.image_path)

  when 'remove','rm'

    name = ARGV.shift || raise('Expecting name as argument!')

    # Append domain name if missing
    name = Virsh::instance(name)

    if Virsh.running?(name)
      Virsh.remove(name)
    else
      $stdout.puts("Instance #{name} not running.")
    end

  else
    raise("Command #{command} unknown!")
  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
