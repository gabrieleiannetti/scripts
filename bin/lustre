#!/usr/bin/env ruby
#
# Copyright 2016 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'

class System 
  def self.exec(command)
    command = command.gsub(/\n/," ").strip.gsub(/\s+/,' ')
    command + ' 2>&1'
    $logger.debug "Exec [#{command}]"
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "Returned with #{state}"
    if state == 0
      return output.gsub(/^$\n/, '')
    else
      $logger.warn "Failed to execute [#{command}]"
      return nil
    end
  end
end



exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
#{exec_name} [<options>] <command> [<arguments>]

<command>
   path2server, p2s <path>              Servers stroing data for a given file.

<options>
  -d, --debug                           Show stacktraces in case of errors.
  -h, --help                            Show this help information.
  -v, --version                         Print version number.
EOF

def ost2server()
  __ = Hash.new
  System::exec(%Q<lctl get_param 'osc.*.ost_conn_uuid'>).split("\n").each do |ost|
    name, ip = ost.split("=")
    name = name.split('.')[1].split('-')[0..1].join('-')
    ip = ip.split('@')[0]
    server = System::exec(%Q<host #{ip}>).split(' ')[-1].split('.')[0]
    __[name] = server
  end
  return __
end

def path2server(path)
  raise("Path #{path} missing") unless File.exist? path
  path = File.absolute_path(path)
  # resolve a directory in a list of files
  path = File.directory?(path) ? Dir.glob("#{path}/*") : [path]
  # list of server names by OSTs
  ost2srv = ost2server
  # iterate over all files
  path.sort.each do |file|
    osts = []
    servers = [] 
    # find all OSTs
    System::exec(%Q[lfs getstripe -q #{file} | tail -n+4]).split("\n").each do |obj|
      obdidx, objid, hobjid, group = obj.split(' ')
      ostid, ost, state = System::exec(%Q<lfs osts | grep #{obdidx}>).delete(':').split(' ')
      ost = ost.gsub(/\_UUID$/,'')
      osts << ost
      server = ost2srv[ost]
      servers << "#{server}:0x#{ost.split('-')[-1].gsub(/OST/,'') }"
    end
    osts.uniq!
    servers = servers.uniq.sort
    nodeset = System::exec(%Q<nodeset -f #{servers.join(' ')}>)
    $stdout.puts "#{File.basename file} #{osts.length} #{servers.length} #{nodeset}"
  end
end

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  $options = OpenStruct.new
  $options.debug = false

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::WARN

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--version'
      $stdout.puts 0.1
      exit 0
    end
  end

  command = ARGV.shift || raise('No command given!')
  case command
  when 'path2server','p2s'
    path2server(ARGV.shift || ENV['PWD'])
  else
    $stdout.puts "Command #{command} not supported"
  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
