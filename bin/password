#!/usr/bin/env bash
#
# Copyright 2013-2016 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# exit if an uninitialised variable is used
#set -o nonunset
# exit of statement returns a non-true return value
#set -o errexit

VERSION=0.1

# Filename of this script
SCRIPT=${0##*/}

# Help text for this script
HELP="Usage: $SCRIPT (e)edit|(l)ist|(p)aste|(s)how [ARGUMENT]"

# enable line numbers for debug output
if [ "$_DEBUG" = "true" ] ; then
  export PS4='(${BASH_SOURCE}:${LINENO}):${FUNCNAME[0]}-[${SHLVL},${BASH_SUBSHELL},$?] '
fi

function _debug() {
  if [ "$_DEBUG" = "true" ]; then
    echo 1>&2 "Debug: $@"
  fi
}

function _error() {
  echo 1>&2 "Error: $@"
  echo "See \`$SCRIPT help\` for usage."
}

# Parse the command line options
ARGS=$(getopt -o h -l "help" -- "$@")
eval set -- "$ARGS"
while true; do
  case "$1" in
    -h|--help)
      _help
      exit 0
      ;;
    --) shift; break ;;
    *) break ;;
  esac
done

if ! command -v ccrypt 2>&1 >/dev/null ; then
  # Debian based platform...
  if command -v apt 2>&1 >/dev/null ; then
    # Install
    sudo apt -y install xclip ccrypt
  fi
  # On Fedora...
  if command -v dnf 2>&1 >/dev/null ; then
    sudo dnf -y install xclip ccrypt
  fi
fi

if [ -z "$PASSWORD_PATH" ]
then
  _error "PASSWORD_PATH not set!"
  exit 1
fi

function list() {
  ccrypt -c $PASSWORD_PATH | cut -d'|' -f1 | sed '/^ *$/d' | sort
}

function show() {
  if [ -z "$1" ]
  then
    _error "Which password to show?"
    exit 1
  fi
  echo $(ccrypt -c $PASSWORD_PATH | grep "^$1" | cut -d'|' -f2 | tr -d ' ' | tr -d '\n') 
}

function paste() {
  echo $(show "$@") | xclip -selection clipboard
  (sleep 30; echo '' | xclip -selection clipboard) &
}

function edit() {
  ccrypt -d $PASSWORD_PATH
  $EDITOR ${PASSWORD_PATH%.cpt}
  ccrypt -e ${PASSWORD_PATH%.cpt}
}


function gen() {
  local num=${1:-10}
  # get pseudo-random bytes as hex string
  openssl rand -hex $num
}

# Read the command-line arguments
_command=$1 ; shift
case "$_command" in 
  list|l) list ;;
  paste|p) paste "$@" ;;
  show|s) show "$@" ;;
  edit|e) edit ;;
  gen|g) gen "$@" ;;
  *) echo "$HELP" ;;
esac

exit 0


