#!/usr/bin/env ruby
#
# Copyright 2016 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong'
require 'logger'
require 'json'
require 'date'
require 'erb'

class Hash
  def self.autonew(*args)
    new(*args){|hsh, key| hsh[key] = Hash.new(&hsh.default_proc) }
  end
end

class Array

  def median
    val = '-'
    unless self.empty?
      # Average and median wait time of all jobs in queue 
      lowest = self.min
      highest = self.max
      total = self.inject(:+)
      length = self.length
      average = total.to_f/length
      sorted = self.sort
      median = if length > 0
                 if length % 2 == 1
                   sorted[length/2]
                 else
                   (sorted[length/2 - 1] + sorted[length/2]).to_f / 2
                 end
               else
                 0
               end
      val = median.to_i
    end
    return val
  end

end

#
# Interface to the command-line environment
#
module System

  module_function

  ##
  # Execute a command passed as parameter an return the output
  # on success. Otherwise the method returns Nil indicating
  # a problem on execution.
  def exec(command, file = '')
    if file.empty?
      command << ' 2>&1'
    # Users can optionally provide a file to store the output into
    #
    else
      # Avoid piping the content threw the Ruby process
      #
      command << " 1> #{file}"
    end
    $logger.info "<#{self.class}##{__method__.to_s}> #{command}"
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "<#{self.class}##{__method__.to_s}> returned with #{state}"
    if state == 0
      return output
    else
      $logger.warn "<#{self.class}##{__method__.to_s}> failed to execute [#{command}]"
      return nil
    end
  end

  ##
  # Execute a command and transform the output line by line
  # into an array splitting each line using a delimiter into
  # a second level array.
  #
  def self.exec_split_lines(command, delimiter = ' ')
    r_val = Array.new
    # Remove line-feed and leading white-space
    #
    command = command.gsub(/^  */,'').gsub(/\n/,' ')
    # Execute the command and split the output by line
    #
    output = System::exec(command)
    $logger.info "<#{self.class}##{__method__.to_s}> split lines by field separator"
    output.each_line do |line|
      # Use the defined delimiter to split the fields per line
      #
      r_val << line.split(delimiter).map(&:strip)
    end
    # Pass the output multi-dimensional array to the caller
    #
    r_val
  end

end

##################################################################
##################################################################

class Sacct

  # List of fields use for the --format options
  #
  FIELDS = %w(
    jobid
    cluster
    partition
    account
    group
    gid
    user
    uid
    submit
    priority
    eligible
    start
    end
    elapsed
    exitcode
    state
    nnodes
    ncpus
    ntasks
    reqcpus
    reqmem
    timelimit
    cputime
    cputimeraw
    nodelist
    jobname
    alloccpus
  )

  # List of job states queried during data export
  #
  STATES = %w(
    cancelled
    completed
    failed
    node_fail
    timeout
  )

  # List of command options provides to sacct
  #
  DEFAULT_OPTIONS = %w(
    --allusers
    --noheader
    --allocations
    --parsable2
  )

  TIME_FORMAT = '%Y-%m-%dT%H:00:00'

  RUNTIMES = %w(
    lt_5m
    lt_1h
    lt_4h
    lt_8h
    lt_12h
    lt_1d
    lt_7d
    gt_7d
  )

  # Primary objects used to group the output statistics
  #
  OBJECTS = %w(
   account
   partition
   user
  )

  attr_reader :opts, :data, :raw_data, :start_time, :end_time

  def initialize()

    @start_time = ''
    @end_time = ''

    # Options from the constants defined above 
    @opts = DEFAULT_OPTIONS
    @opts << "--state #{states}"
    @opts << "--format #{fields}"

    # This is the default used with options --parsable2
    @delimiter = '|'

    # Users may limited statistics to a subset of jobs executed on nodes 
    # matching a provided regular expression
    #
    @node_regex = String.new
    # Data returned from the sacct command
    @raw_data = Array.new

    # Statistical data used as output for the user
    #
    @data = { 'runtime' => 0}
    # Statistics are collected for all reference objects
    OBJECTS.each {|_| @data[_] = Hash.new}

    @parition = String.new
  end

  # Couple of setters for options to the sacct command
  #
  def end_time=(time = '')
    # If end time is not defined, this hour is used instead
    time = Time.now.strftime TIME_FORMAT if time.empty?
    @end_time = time
    @opts << "--endtime #{time}"
  end
  def start_time=(time) 
    @start_time = time
    @opts << "--starttime #{time}" 
  end
  def account(account) ; @opts << "--accounts #{account}" end
  def user(user) ; @opts << "--user #{user}" end
  def partition(partition)
    @partition = partition
    @opts << "--partition #{partition}"
  end
  def node_regex(regex) ; @node_regex = regex end

  # Collect statistics of the accounting data returned by sacct
  #
  def parse
    # Execute sacct to get the input data from the Slurm 
    # accounting database
    exec()
    # Iterate over all jobs in the returned raw data an accumulate 
    # the required statistics
    process()
    # Arithmetic on the statistical data
    post_process()
  end

  private

  # Data structure used by all objects to keep the statistics
  #
  def skeleton
    skel = {
      'accounts' => Array.new,
      'jobs' => 0,
      'partitions' => Array.new,
      'runtime' => 0,
      'users' => Array.new,
      'qwmedian' => Array.new
    }
    skel.merge(runtimes_h).merge(states_h)
  end

  # Accumulate statistics and write them into @data
  #
  def process
    # Initialize the basic data structure using the skeleton
    OBJECTS.each do |object|
      index = field_index(object) + 1
      # Do not implement this in Ruby code...
      elems = System::exec %Q<cat #{data_file} | cut -d'#{@delimiter}' -f#{index} | sort | uniq>
      # ...it is difficult to implement it more efficiently 
      elems.each_line do |elem|
        @data[object][elem.chop] = skeleton
      end
    end
    $logger.info "<#{self.class}##{__method__.to_s}>"
    # Avoid memory slurping by reading the lines one-by-one into memory
    File.foreach(data_file) do |line|
      # Unfortunately this is the most expensive line of code in this program!
      # It represents the metric collected for each job by the accounting
      line = line.chop!.split(@delimiter)
      # Exclude nodes no matching a pattern defined by the user 
      unless @node_regex.empty?
        next unless line[field_index 'nodelist'] =~ Regexp.new(@node_regex)
      end
      # Basic metric for the accumulation of statistics
      runtime   = line[field_index 'cputimeraw'].to_i
      account   = line[field_index 'account']
      user      = line[field_index 'user']
      partition = line[field_index 'partition']
      j_state   = line[field_index 'state']
      # Store the statistics
      @data['runtime'] += runtime
      # ...for each object, means accounts, partitions, users
      OBJECTS.each do |key|
        value = line[field_index key]
        @data[key][value]['accounts']             = (@data[key][value]['accounts'] << account).uniq
        @data[key][value]['jobs']                += 1
        @data[key][value]['runtime']             += runtime
        @data[key][value]['users']                = (@data[key][value]['users'] << user).uniq
        @data[key][value]['partitions']           = (@data[key][value]['partitions'] << partition).uniq
        @data[key][value][state(j_state)]        += 1
        @data[key][value][runtimes_key(runtime)] += 1
        # This is expensive in terms of the memory foot print!
        if $options.format.include? 'qwmedian'
          qwmedian  = waittime(line[field_index 'submit'],line[field_index 'start'])
          if qwmedian < 31449600 or qwmedian > 0
            @data[key][value]['qwmedian'] << qwmedian 
          end
        end
      end
    end
  end

  def post_process
    $logger.info "<#{self.class}##{__method__.to_s}>"
    OBJECTS.each do |key|
      @data[key].each do |value,data|
        # Relative percent of the consumed resources according to the CPU seconds
        r_perc = sprintf '%.2f', (data['runtime'].to_f/@data['runtime']) * 100
        @data[key][value]['useperc'] = r_perc
         # Median wait time of jobs in queue
        @data[key][value]['qwmedian'] = humanize_secs data['qwmedian'].median
      end
    end
  end

  # List of sacct --format fields 
  #
  def fields ; FIELDS.join(',') end

  # Get the numerical position of a given field in the field-list
  #
  def field_index(field) ; FIELDS.index(field) end

  # This may include states  like "CANCELLED by 1234",
  # therefore everything after the first space is removed
  #
  def state(s) ; s.gsub(/\s.*/,'').downcase end

  # List of sacct --states 
  #
  def states ; STATES.join(',') end

  # List of states as a hash
  #
  def states_h ; Hash[ STATES.map {|_| [_,0]} ] end

  # List of runtime groups as a hash
  #
  def runtimes_h ; Hash[ RUNTIMES.map {|_| [_,0]} ] end

  # Determine which runtime group a runtime in seconds belongs to
  #
  def runtimes_key(seconds)
    case
    when seconds < 300    ; 'lt_5m'
    when seconds < 3600   ; 'lt_1h'
    when seconds < 14400  ; 'lt_4h'
    when seconds < 28800  ; 'lt_8h'
    when seconds < 43200  ; 'lt_12h'
    when seconds < 86400  ; 'lt_1d'
    when seconds < 604800 ; 'lt_7d'
    else                  ; 'gt_7d'
    end
  end

  def waittime(start_time,end_time)
    submit_epoch = DateTime.strptime(start_time,'%Y-%m-%YT%H:%M').to_time.to_i
    start_epoch = DateTime.strptime(end_time,'%Y-%m-%YT%H:%M').to_time.to_i
    wait_time_secs = start_epoch - submit_epoch
    return wait_time_secs
  end


  def humanize_secs(seconds)
    days = seconds / (60*60*24)
    seconds = seconds % (60*60*24)
    hours = Time.at(seconds).utc.strftime('%H:%M')
    days > 0 ? "#{days}-#{hours}" : hours
  end

  # Path to the file used to cache the output of the sacct command
  #
  def data_file
    $logger.debug "<#{self.class}##{__method__.to_s}> #{@partition}"
    parts = @partition.sub(/,/, '_')
    "/tmp/#{ENV['USER']}_sacct_#{@start_time}_#{@end_time}_#{parts}.csv"
  end

  # Execute the sacct command with the configured options
  # and store the output to a file
  #
  def exec
    # It is very expensive to query the Slurm accounting database
    # therefore make sure to buffer the result on disc to support
    # multiple executions of the program on the same time frame.
    if File.exist? data_file
      $logger.info "<#{self.class}##{__method__.to_s}> File exists #{data_file}"
    else
      # Gather the accounting data from Slurm
      #
      sacct_cmd = "sacct #{@opts.join(' ')}"
      System::exec(sacct_cmd, data_file)
    end 
  end

end

#
# Print an array as table with padded columns
#
class Table

  def initialize(output)
    @output = output
  end

  def self.print(table)
    Table.new(table).rows
  end

  def rows
    form = format()
    rows = String.new
    @output.each do |row|
      $logger.debug("#{row.inspect}")
      rows << sprintf("#{form}\n", *row)
    end
    return rows
  end

  def format
    format = Array.new
    columns = @output.first.length
    0.upto(columns-1) do |column|
      format << "%-#{field_width(column)}s"
    end
    return format.join(' ')
  end

  def field_width(field = 0)
    max_width = 0
    @output.each do |row|
      elem = row[field].to_s
      next if elem.empty?
      width = elem.length
      max_width = width if width > max_width
    end
    return max_width
  end

end

module HTML

  PURPLE_4 = '#551A8B'
  PURPLE_3 = '#7D26CD'
  MAGENTA_3 = '#CD00CD'
  MEDIUMORCHID_1 = '#E066FF'
  PLUM = '#DDA0DD'
  THISTLE_2 = '#EED2EE'

  module_function

  def num_with_delimiter(num, delim = ';psbn&')
    num.to_s.chars.to_a.reverse.each_slice(3).map(&:join).join(delim).reverse
  end

  def runtime(val)
    l = val.to_s.length
    color = if    l > 9   ; PURPLE_4
            elsif l > 8   ; PURPLE_3
            elsif l > 7   ; MAGENTA_3
            elsif l > 6   ; MEDIUMORCHID_1
            elsif l > 5   ; PLUM
            else          ; THISTLE_2
            end
    %Q[<span style="color:#{color}">#{num_with_delimiter val}</span>]
  end

  GRAY_20        = '#333333'
  GRAY_40        = '#666666'
  GRAY_50        = '#7F7F7F'
  GRAY_60        = '#999999'
  GRAY_70        = '#B3B3B3'
  GRAY_80        = '#CCCCCC'
  GRAY_95        = '#F2F2F2'

  def counter(val)
     l = val.to_s.length
     color = if    l > 8  ; GRAY_20
             elsif l > 7  ; GRAY_40
             elsif l > 6  ; GRAY_50
             elsif l > 5  ; GRAY_60
             elsif l > 4  ; GRAY_70
             else         ; GRAY_80
             end
     return %Q[<span style="color:#{color}">#{num_with_delimiter val}</span>]
  end

  # Returns a colorized value from a user defined color
  # configuration if present...
  #
  def map_style(key, val)

    # If a list is passed as argument 
    if val.class == Array
      _ = Array.new
      # Iterate and recursive call this method for each value
      val.each {|v| _ << map_style(key, v) }
       return _.join(',')
    end

    # Check if the user configuration contains color mapping
    # for the given key
    #
    if $config.has_key? 'color' and
       $config['color'].has_key? key and 
       $config['color'][key].has_key? val
      # Retrieve the color information
      #
      color = $config['color'][key][val]
      # Embed the color information into a span tag, and
      # return the HTML code to the caller
      #
      return %Q[<span style="color:#{color}">#{val}</span>]
    end
    # Return the original value if mapping is not possible
    #
    val
  end

end


#########################################################
#########################################################

exec_name = File.split(__FILE__)[-1]
HELP = "
Read accounting data from Slurm and accumulate statistics:

#{exec_name} [<options>] <start_time> [<end_time>]

  start_time                 Select accounting data after start time
                             Time format like `sacct`...
  end_time                   Select accounting data before end time
                             (default is now)

  --account, -a <acc,acc>    Limit the output to a given list of accounts
  --config-file, -c <path>   Configure the HTML output
  --debug, -D                Show stack traces in case of errors
  --example                  Show help text with usage examples
  --format, -f <field,field> List of fields to include in output
  --format-list, -F          List of fields available to print
  --group-by, -g <group>     Group ouput by account, partition oser user
  --help                     Show this help information
  --html, -h                 Print output as HTML table
  --no-header, -H            Do not print a table header in output
  --node-regex, -n <regex>   Regular expression to select a subset of nodes
  --partition, -p <par,par>  Limit the output ot a given list of partitions
  --print-data               Print the parsed and processed data
  --print-raw-data           Print data from the accounting database
  --sort-by, -s <field>      Sort the output by selected field
  --user, -u <usr,usr>       Limit the output to a given list of users
  --version                  Print program version
"

EXAMPLE = "
The program will cache retrieved accounting data from the Slurm database:

  /tmp/<user>_sacct_<start_time>_<end_time>.csv

This will improve the performance of the program for subsequent execution
with the same time-frame.

Statistics for a given time frame:

   >>> #{exec_name} 2016-06-26T00:00:00 2016-06-27T23:59:59

Statistics since a given point in time with a defined list of fields:
   
   >>> #{exec_name} -f accounts,runtime,useperc,jobs 2016-06-26T00:00:00

Statistics of a specific partition as HTML table:

   >>> #{exec_name} -p main -h 2016-06-26T00:00:00

The printed HTML table fragment can be embedded into an HTML page.

Statistics grouped by user descending by the number of executed job:  

   >>> #{exec_name} -f users,useperc,runtime,jobs -g user -s jobs [...]
"


begin

  #stdin = $stdin.tty? ? String.new : $stdin.read

  DEFAULT_FORMAT = %w(
    accounts
    useperc
    runtime
  )

  FORMAT_OPTIONS = {
    accounts:   'Name of a Slurm account',
    users:      'Name of a user',
    partitions: 'Name of a partition',
    useperc:    'Relative use in percent',
    qwmedian:   'Median time jobs waited in the queue, format [DD-]HH:MM',
    runtime:    'Total run-time in seconds',
    jobs:       'Total number of jobs',
    completed:  'Total number of completed jobs',
    cancelled:  'Total number of canceled jobs',
    failed:     'Total number of failed jobs',
    node_fail:  'Total number of node failers',
    timeout:    'Total number of jobs ended by time out',
    lt_5m:      'Number of jobs with a run-time sorter then 5 minutes',
    lt_1h:      'Number of jobs with a run-time sorter then 1 hour',
    lt_4h:      'Number of jobs with a run-time sorter then 4 hours',
    lt_8h:      'Number of jobs with a run-time sorter then 8 hours',
    lt_12h:     'Number of jobs with a run-time sorter then 12 hours',
    lt_1d:      'Number of jobs with a run-time sorter then 1 day',
    lt_7d:      'Number of jobs with a run-time sorter then 7 days',
    gt_7d:      'Number of jobs with a run-time longer then 7 days'
  }

  $config = Hash.new

  $options = OpenStruct.new
  $options.config_file = String.new
  $options.debug = false
  $options.format = DEFAULT_FORMAT
  $options.format_all = false
  $options.group_by = 'account'
  $options.html = false
  $options.node_regex = String.new
  $options.node_header = false
  $options.print_data = false
  $options.print_raw_data = false
  $options.sort_by = 'runtime'

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::WARN

  sacct = Sacct.new

  GetoptLong.new(
    ['--account','-a',GetoptLong::REQUIRED_ARGUMENT],
    ['--config-file','-c',GetoptLong::REQUIRED_ARGUMENT],
    ['--debug','-D',GetoptLong::NO_ARGUMENT],
    ['--example',GetoptLong::NO_ARGUMENT],
    ['--format','-f',GetoptLong::REQUIRED_ARGUMENT],
    ['--format-list','-F',GetoptLong::NO_ARGUMENT],
    ['--format-all','-A',GetoptLong::NO_ARGUMENT],
    ['--group-by','-g',GetoptLong::REQUIRED_ARGUMENT],
    ['--help',GetoptLong::NO_ARGUMENT],
    ['--html','-h',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--node-regex','-n',GetoptLong::REQUIRED_ARGUMENT],
    ['--no-header','-H',GetoptLong::NO_ARGUMENT],
    ['--partition','-p',GetoptLong::REQUIRED_ARGUMENT],
    ['--print-data',GetoptLong::NO_ARGUMENT],
    ['--print-raw-data',GetoptLong::NO_ARGUMENT],
    ['--sort-by','-s',GetoptLong::REQUIRED_ARGUMENT],
    ['--user','-u',GetoptLong::REQUIRED_ARGUMENT],
    ['--version',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--account'
      sacct.account arg
    when '--config-file'
      raise("#{arg} not existing!") unless File.exists? arg
      $options.config_file = arg
      $config = JSON.parse File.read($options.config_file)
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--example'
      $stdout.puts EXAMPLE
      exit 0
    when '--format'
      format = Array.new
      arg.split(',').each do |f|
        raise("Format option #{f} not supported") unless FORMAT_OPTIONS.keys.include? f.to_sym
        format << f
      end
      $options.format = format
    when '--format-list'
      table = []
      FORMAT_OPTIONS.each { |k,v| table << [k,v] }
      $stdout.puts Table::print table
      exit 0
    when '--format-all'
      $options.format = FORMAT_OPTIONS.keys.map {|k| k.to_s }
    when '--group-by'
      groups = %w(account partition user)
      if groups.include? arg
        $options.group_by = arg
      else
        raise("Group by: #{groups.('|')}")
      end
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--html'
      $options.html = true
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--no-header'
      $options.no_header = true
    when '--node-regex'
      sacct.node_regex arg
    when '--partition'
      sacct.partition arg
    when '--print-data'
      $options.print_data = true
    when '--print-raw-data'
      $options.print_raw_data = true
    when '--sort-by'
      raise("Sort option #{arg} not supported") unless FORMAT_OPTIONS.keys.include? arg.to_sym
      $options.sort_by = arg
    when '--user'
      sacct.user arg
    when '--version'
      $stdout.puts 0.58
      exit 0
    end
  end


  # Users are required to define a start time
  sacct.start_time = ARGV.shift || raise('Define a start time in the format YYYY-MM-DDTHH:MM:SS')
  # Users can optionally define an end time
  sacct.end_time = ARGV.shift || ''
  sacct.parse

  if $options.print_raw_data
    $stdout.puts sacct.raw_data
    exit 0
  end

  if $options.print_data
    $stdout.puts JSON.pretty_generate sacct.data
    exit 0
  end

  data = sacct.data[$options.group_by]

  rel = {}
  data.each{|n,d| rel[n] = d[$options.sort_by] }
  order = rel.sort_by{|k,v| v}
  order = order.reverse unless %w(accounts partitions users).include? $options.sort_by
  order = order.to_h.keys

  # Do not accounts/users/partitions to the output if no runtime has been accumulated
  order.delete_if{|elem| data[elem]['runtime'] == 0 }

  case $options.group_by
  when 'account'
    data.each_key do |_|
      %w(partitions users).each {|obj| data[_][obj] = data[_][obj].length }
      data[_]['accounts'] = data[_]['accounts'].first 
    end
  when 'user'
    data.each_key do |_|
      data[_]['users'] = data[_]['users'].first
    end
  when 'partition'
    data.each_key do |_|
      %w(accounts users).each {|obj| data[_][obj] = data[_][obj].length }
      data[_]['partitions'] = data[_]['partitions'].first
    end
  end

  if $options.html
    $stdout.puts ERB.new(DATA.read,nil,'-').result(binding)
  else
    table = Array.new
    table << $options.format.map(&:upcase) unless $options.no_header
    order.each do |elem|
      row = Array.new
      $options.format.each do |field|
        val = data[elem][field]
        val = val.join(',') if val.class == Array
        row << val
      end
      table << row
    end
    $stdout.puts Table::print table
  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0

__END__
<table>
  <% if not $options.no_header -%>
  <caption>
  From <%= sacct.start_time -%> to <%= sacct.end_time %>
  </caption>
  <thead>
    <tr><% $options.format.each do |field| -%><th><%= field.capitalize %></th><% end -%></tr>
  </thead>
  <% end -%>
  <tbody>
  <% order.each do |elem| -%>
    <tr>
    <% $options.format.each do |field| -%>
      <td><%=
        value = data[elem][field]
        case field
        when 'accounts','partitions','users'
            HTML::map_style field, value
        when 'jobs'
            HTML::counter(value)
        when 'runtime' 
            HTML::runtime(value)
        else
          value
        end
      -%></td>
    <% end -%>
    </tr>
  <% end -%>
  </tbody>
</table>
