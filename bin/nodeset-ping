#!/usr/bin/env ruby
#
# Copyright 2014-2016 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
Ping, and SSH check a set of nodes:

#{exec_name} [-dhslv] [<nodeset>]

  nodeset:               List of nodes in the nodeset format
  --debug, -d            Show stacktraces in case of errors
  --help, -h             Show this help information
  --ssh-listen, -s       Check if the SSH deamon is listening
  --ssh-login, -l        Check if SSH login is possible 
  --version, -v          Print version number.
  NODES                  Environment variable for the nodeset
EOF

def nodeset_fold(nodeset)
  `echo "#{nodeset.join(' ')}" | nodeset -f`.chop
end


begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  options = OpenStruct.new
  options.debug = false
  options.fold = false
  options.ssh_listen = false
  options.ssh_login = false
  options.ssh_port = 22

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%d %H:%M:%S "
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::INFO

  GetoptLong.new(
    ['--ssh-listen','-s',GetoptLong::NO_ARGUMENT],
    ['--ssh-login','-l',GetoptLong::NO_ARGUMENT],
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--version',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--ssh-listen'
      options.ssh_listen = true
    when '--ssh-login'
      options.ssh_listen = true
      options.ssh_login = true
    when '--debug'
      options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--version'
      $stdout.puts 2.0
      exit 0
    end
  end

  # Does to user provide a nodeset as parameter?  
  if ARGV.length.eql?(1)
    nodeset = ARGV.shift
  elsif not stdin.empty?
    nodeset = stdin
  # Is the environment variable NODES set  
  elsif ENV.has_key? 'NODES'
    nodeset = ENV['NODES']
  else
    raise("Pass a set of nodes as parameter, or use environment variable NODES!")
  end
  # Expand the nodeset and transform it into an array
  nodeset = `nodeset -e #{nodeset}`.split(' ')

  online = Array.new
  offline= Array.new
  # Iterate over the nodes an remember online hosts
  nodeset.each do |node|
    # Suppress error messages while sending a 
    # single ping with an live time of a second
    `ping -c 1 -w 1 #{node} 2>&-`
    if $?.exitstatus == 0
      online << node 
    else
      offline << node
    end
  end

  $stderr.puts "#{nodeset_fold(offline)} offline" unless offline.empty?

  if not options.ssh_listen
    $stdout.puts nodeset_fold online

  #
  # Check if SSH is listening
  #
  else

    # list of nodes with SSH listening
    listen = Array.new
    # list of nodes with SSH closed
    closed = Array.new
    # Iterate over the list of online nodes
    online.each do |node|
      # Check if the SSH port is listening
      output = `netcat -zv #{node} #{options.ssh_port} 2>&1`
      if output.include? 'succeeded'
        listen << node
      else
        closed << node
      end
    end

    $stderr.puts "#{nodeset_fold close} closed" unless closed.empty?
    $stderr.flush

    if not options.ssh_login
      $stdout.puts nodeset_fold listen

    #
    # Check if SSH login is possible
    #
    else
      login = Array.new
      nologin = Array.new
      listen.each do |node|
        output = `ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=1 -o ConnectionAttempts=1 #{node} echo ok 2>&1`.split("\n")[-1]
        if output =~ /^ok$/
          login << node
        else
          nologin << node
        end
      end
      $stderr.puts "#{nodeset_fold nologin} nologin" unless nologin.empty?
      $stdout.puts nodeset_fold login
    end

  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
