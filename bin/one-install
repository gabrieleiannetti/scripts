#!/bin/bash
#
# Copyright 2013 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

VERSION=0.1

# Filename of this script
_script=$(basename $0)

# Help text for this script
function _help() {
echo "Usage: $_script [COMMAND] [ARGUMENTS]
  
  $_script build VERSION
    Clone the developer source code to /usr/local/srv/one
    and execute the build process.
  $_script clean VERISON
    Remove all build artifacts
  $_script deploy VERSION [PATH].
    Install OpenNebula on the node, to PATH if provided."
}

# enable line numbers for debug output
if [ "$_DEBUG" = "true" ] ; then
  export PS4='(${BASH_SOURCE}:${LINENO}):${FUNCNAME[0]}-[${SHLVL},${BASH_SUBSHELL},$?] '
fi
function _debug() {
  if [ "$_DEBUG" = "true" ]; then
    echo 1>&2 "DEBUG $@"
  fi
}

function _error() {
  echo 1>&2 "ERROR $@"
}

# Parse the command line options
ARGS=$(getopt -o hd -l "help,debug" -- "$@")
eval set -- "$ARGS"
while true; do
  case "$1" in
    -d|--debug)
      _DEBUG=true
      shift
      ;;
    -h|--help)
      _help
      exit 0
      ;;
    --) shift; break ;;
    *) break ;;
  esac
done

function prerequisits() {
  local version=$1
  # Build dependencies
  _debug "Installing build dependencies"
  apt-get -qqy install g++ libxmlrpc-c3-dev scons libsqlite3-dev libmysqlclient-dev libxml2-dev libssl-dev ruby-dev git-core libxslt1-dev make rake sqlite3 libcurl4-openssl-dev gcc 1>/dev/null 2>&1
  # Create a system account for OpenNebula 
  _debug "Add group [cloud]"
  groupadd --force cloud
  _debug "Add user [oneadmin]"
  useradd oneadmin --home /var/lib/one --gid cloud --create-home --system --shell /bin/bash 2>/dev/null
  # Insecure connection credential
  mkdir -p -m 770 ~oneadmin/.one || exit 1
  chown oneadmin:cloud ~oneadmin/.one
  su -c 'echo "oneadmin:sfR32fdv78SlT23sE94D" > ~oneadmin/.one/one_auth' - oneadmin
  chmod 600 ~oneadmin/.one/one_auth
  if [ ! ~oneadmin/.ssh/id_rsa ] ; then 
    _debug "Creating SSH key-pair fro user [oneadmin]"
    su -c 'ssh-keygen -q -t rsa -b 2048 -N "" -f ~oneadmin/.ssh/id_rsa' - oneadmin
  fi
  # Prepare the build directory
  build_directory=/usr/local/src/one/$version
  GIT_DIR=$build_directory/.git
  GIT_WORK_TREE=$build_directory
  export GIT_DIR GIT_WORK_TREE
}

function clone() {
  _debug "Build directory $GIT_WORK_TREE"
  mkdir -p $GIT_WORK_TREE || exit 1
  # Initialize Git repository if it is missing.
  test -d "$GIT_DIR" || git init $GIT_WORK_TREE
  # Add the remote repository if missing
  git config --get remote.origin.url 1>/dev/null
  if [[ $? != 0 ]] ; then
    git remote add origin git://git.opennebula.org/one.git
    _debug "Adding Git remote git://git.opennebula.org/one.git"
  fi
  _debug "Fetching remote Git repository"
  git fetch origin 1>/dev/null 2>/dev/null
  _debug "Checkout version $1"
  git checkout release-$1 1>/dev/null 2>/dev/null
}

function build() {
  cd $GIT_WORK_TREE
  _debug "Build process logging to $GIT_WORK_TREE/build.log"
  scons mysql=no 1> build.log 2>&1
  cd - 1>/dev/null
}

function deploy() {
  local path=$1
  # enable self-contained deployment optionally
  local options=
  cd $GIT_WORK_TREE
  _debug "Install process logging to $GIT_WORK_TREE/install.log"
  if [ -n "$path" ] ; then
    options="on"
    _debug "Install OpenNebula to $path"
    ./install.sh -u oneadmin -g cloud -d $path > install.log 2>&1
  else
    _debug "Global installation of OpenNebula"
    ./install.sh -u oneadmin -g cloud > install.log 2>&1
  fi
  cd - 1>/dev/null
  # only in case of a self-contained installation
  if [ -n "$options" ] ; then
    # Add all executables to the PATH
    echo "export PATH=$path/bin:\$PATH" > $path/source.me
    # OpenNebula base directory
    echo "export ONE_LOCATION=$path" >> $path/source.me
    # Client RPC interface
    echo "export ONE_XMLRPC=http://localhost:2633/RPC2" >> $path/source.me
    # Run the shipped extensions deployment script
    $path/share/install_gems sunstone cloud
  else
    /usr/share/one/install_gems sunstone cloud
  fi
}

# Read the command-line arguments
_command=${1:-help} ; shift
if [ "$_command" == "help" ] ; then
  _help
  exit 0
fi

# Does the caller provided a version?
_version=$1 ; shift
if [ -f $_version ] ; then
 _error "No version defined"
 exit 1
fi

prerequisits $_version

case "$_command" in 
  build) clone $_version; build ;;
  clean) rm -rf $GIT_WORK_TREE ;;
  deploy) deploy "$@" ;;
  *) _error "Command not supported"; exit 1 ;;
esac

exit 0


