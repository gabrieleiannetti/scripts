#!/usr/bin/env ruby
#
# Copyright 2016 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'
require 'date'

class System 
  
  def self.exec(command)
    command + ' 2>&1'
    $logger.debug "Exec [#{command}]"
    # Execute command as subprocess and return the exit code
      pipe = IO.popen(command)
      # Get the process ID from the child
      pid = pipe.pid
      # Read the output from the stream
      output = pipe.read
      # Wait for successful return and pass back the code to the caller
      Process.wait(pid)
      state=$?
      $logger.debug "Returned with #{state}"
      $logger.debug "No output received" if output.empty?
      if state == 0
        return output
      else
        $logger.warn "Failed to execute [#{command}]"
        return nil
      end
  end

end


exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
Synopsis
========

Extract accounting data from Slurm using the `sacct` command
and write it to a directory tree in the form YYYY/MM. The
command will iterate by day over the specified time frame, 
and create a single text-file including all jobs and clusters.

Usage
=====

#{exec_name} [OPTIONS] START_DATE END_DATE 

  START_DATE          Begin date in form YYYY-MM-DD
  END_DATE            End date in form YYYY-MM-DD

Options
=======
  --debug, -d         Show stacktraces in case of errors.
  --help, -h          Show this help information.
  --version, -v       Print version number.
EOF

begin

  #stdin = $stdin.tty? ? String.new : $stdin.read

  options = OpenStruct.new
  options.debug = false

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S "
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::WARN

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--version'
      $stdout.puts 0.1
      exit 0
    end
  end

  start_date = ARGV.shift || raise('Specify start date of the form YYYY-MM-DD')
  end_date = ARGV.shift || raise('Specify end date of the form YYYY-MM-DD')

  format = %w( 
    jobid
    cluster
    partition
    account
    group
    gid
    user
    uid
    submit
    eligible
    start
    end
    elapsed
    exitcode
    state
    nnodes
    ncpus
    reqcpus
    reqmem 
    timelimit
    nodelist
    jobname
  )
  
  states = %w(
    CANCELLED
    COMPLETED
    FAILED
    NODE_FAIL
    PREEMPTED
    TIMEOUT
  )

  start_date = Date.parse(start_date)
        date = start_date
    end_date = Date.parse(end_date)

  loop do
    
    path = date.strftime("%Y/%m/%d.csv")
 
    unless File.directory? File.dirname(path)
      System::exec("mkdir --parents #{File.dirname(path)}")
      $logger.info("Directory [#{path}] created")
    end

    if File.exists?(path)
      $stdout.puts "S #{path}"
    else
      command = "
        sacct
         --allusers
         --allclusters
         --noheader
         --allocations
         --parsable2
         --format #{format.join(',')}
         --state #{states.join(',')}
         --starttime #{date}T00:00:00
         --endtime #{date}T23:59:59
         > #{path}
      ".gsub(/^  */,'').gsub(/\n/,' ')    
      System::exec(command)
      $stdout.puts "W #{path}"
    end

    break if date == end_date   
    date = date.next_day
  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0

