#!/usr/bin/env ruby
#
# Copyright 2012 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'
require 'json'
require 'tempfile'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
Synopsis
========

Store and load hash tables from a Redis database.

Usage
-----

[INPUT |] #{exec_name} [OPTIONS] SERVER [PATTERN,[PATTERN,..]]

  INPUT 
    Write a flat (not nested) JSON hash to the Redis
    database.
  SERVER
    Hostname of the Redis server.
  PATTERN
    Load all values of keys matching the pattern from
    the Redis database.

Options
-------

  --debug, -D
    Show stacktraces in case of errors.
  --help, -h
    Show this help information.
  --port, -p NUM
    Port of the Redis database server.
  --version, -v
    Print version number.
EOF

class Hash
  def rmerge(other_hash)
    r = {}
    merge(other_hash) do |key, oldval, newval|
      r[key] = oldval.class == self.class ? oldval.rmerge(newval) : newval
    end
  end
end

class System 
  
  def self.exec(command)
    command + ' 2>&1'
    unless $options.command_prefix.nil?
      command = %Q[#{$options.command_prefix} #{command}]
    end
    $logger.debug "Exec [#{command}]"
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "Returned with #{state}"
    if state == 0
      return output
    else
      $logger.warn "Failed to execute [#{command}]"
      return nil
    end
  end

end

class Redis

  def initialize(server = 'localhost', port = 6379)
    @server = server
    @port = port
    $logger.info("Redis database at #{server}:#{port}")
  end
  
  def keys(pattern)
    command(%Q[KEYS "#{pattern}"]).split("\n")
  end

  def get(key)
    command("GET '#{key}'")
  end

  def set(key,value)
    command(%Q[SET "#{key}" "#{value}"])
  end

  def sets(hash)
    commands = Array.new
    hash.each do |key,value|
      commands << %Q[SET "#{key}" "#{value}"]
    end
    pipe(commands.join("\n"))
  end

  def del(*keys)
    command(%Q[DEL "#{keys.join('" "')}"])
  end

  def gets(keys)
    commands = Array.new
    keys.each { |key| commands << "GET #{key}" }
    values = pipe(commands.join("\n")).split("\n")
    return Hash[*keys.zip(values).flatten]
  end

  private

  def pipe(stdin)
    # Don't use string interpolation for the input pipe, since it is limited in size
    tmpfile = System::exec('tempfile').chomp
    # Write the input Redis commands to a temporary file 
    File.open(tmpfile,'w') { |f| f.write stdin }
    begin
      System::exec(%Q[cat #{tmpfile} | redis-cli -h #{@server} -p #{@port} ])
    ensure
      System::exec("rm #{tmpfile}")
    end
  end

  def command(string)
    System::exec(%Q[redis-cli -h #{@server} -p #{@port} #{string}])
  end

end

begin

  stdin = $stdin.tty? ? nil : $stdin.read

  $options = OpenStruct.new
  $options.debug = false
  $options.port = 6379
  $options.delete = nil

  $logger = Logger.new($stderr)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%d %H:%M:%S "
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end
  $logger.level = Logger::WARN

  GetoptLong.new(
    ['--debug','-D',GetoptLong::NO_ARGUMENT],
    ['--delete','-d',GetoptLong::REQUIRED_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--port','-p',GetoptLong::REQUIRED_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--delete'
      $options.delete = arg
    when '--help'
      $stdout.puts HELP
      exit 0
    when '--log-level'
      $logger.level = case arg
      when 'warn'
        Logger::WARN
      when 'debug'
        Logger::DEBUG
      when 'fatal'
        Logger::FATAL
      else
        Logger::INFO
       end
    when '--port'
      $options.port = arg
    when '--version'
      $stdout.puts 0.3
      exit 0
    end
  end

  input = unless stdin.nil?
            stdin
          else
            nil
          end

  server = ARGV[0] || raise('Redis server name expected!')
  redis = Redis.new(server,$options.port)

  unless $options.delete.nil?
    redis.del(redis.keys("#{$options.delete}*"))
    exit 0
  end

  # It is assumed that the user wants to retrieve data from Redis
  if input.nil?
    if ARGV.length > 1
      patterns = ARGV[1..-1] 
    else
      raise('Search pattern expected!')
    end
    # aggregate all keys
    keys = Array.new
    patterns.each { |pattern| keys += redis.keys("*#{pattern}*") }
    # retrieve all values and generate a JSON object
    $stdout.puts JSON.pretty_generate(redis.gets(keys))
  # Store key-value pairs to a Redis instance
  else
    redis.sets(JSON.parse(input)) 
  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
