#!/usr/bin/env ruby
#
# Copyright 2012 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


require 'rubygems'
require 'ostruct'
require 'logger'
require 'getoptlong' 
require 'socket'
require 'json'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF

  #{exec_name} [OPTIONS] [ARGUMENTS]

Options
-------

  --debug, -d
    Show stacktraces in case of errors.
  --daemonize, -D 
    Background daemon process.
  --help, -h
    Show this help information.
  --log-file, -l PATH:
    Path to the log file when executed as daemon (defaults
    to /var/log/#{exec_name}.log).
  --log-level, -L debug|info|warn|fatal
    Verbosity of the logging output.
  --pid-file, -p PATH:
    Path to a file storing the process ID when executed as 
    daemon (default to /var/run/#{exec_name}.pid.
  --version
    Print program version.
EOF

begin

  # Unlikely to be used by a daemon 
  #stdin = $stdin.tty? ? String.new : $stdin.read

  $DEBUG = false

  $options = OpenStruct.new
  $options.debug = false
  $options.interval = 300
  $options.daemonize = false
  $options.pid_file = "/var/run/#{exec_name}.pid"
  $options.log_file = "/var/log/#{exec_name}.log"
  

  $logger = Logger.new(STDOUT)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%d %H:%M:%S "
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end

  $logger.level = Logger::INFO

  GetoptLong.new(
    ['--daemonize','-D',GetoptLong::NO_ARGUMENT],
    ['--pid-file','-p',GetoptLong::REQUIRED_ARGUMENT],
    ['--log-file','-l',GetoptLong::REQUIRED_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--version',GetoptLong::NO_ARGUMENT],
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
  ).each do |opt,arg|
    case opt
    when '--pid-file'
      $options.pid_file = arg
    when '--log-file'
      $options.log_file = arg
    when '--log-level'
      $logger.level = case arg
         when 'warn'
           Logger::WARN
         when 'debug'
           Logger::DEBUG
         when 'fatal'
           Logger::FATAL
         else
           Logger::INFO
         end
    when '--version'
      $stdout.puts VER
      exit 0
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    end
  end

  shutdown = false

  Signal.trap('TERM') do
    $logger.info "Service terminated."
    exit 0
  end
  Signal.trap('INT') do
    $logger.info "Wait for shutdown..."
    shutdown = true
  end
 
  if $options.daemonize
    if RUBY_VERSION < '1.9'
      exit if fork
      Process.setsid
      exit if fork
      Dir.chdir '/'
    else
      Process.daemon
    end
    # Write the process ID to a file
    File.open($options.pid_file,'w') { |file| file.write "#{$$}\n"}
    # Bind output to a log file
    $stdin.reopen '/dev/null'
    $stdout.reopen($options.log_file,'w')
    $stdout.sync = true
    $stderr.reopen($stdout)
  end

  # Dive into an endless loop
  while(true)
    break if shutdown
    # Implement the daemon here!
  end
  $logger.info "Service stopped!"

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts "Catched: #{exc.class}"
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
